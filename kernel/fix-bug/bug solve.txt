bug解决列表:
==============================================================
问题2、3：
#问题2：思路
    struct sensor_private_data有一个misc_dev字段，我们可以利用这个字段来想rk sensor core自定义misc。
sensor core在sensor_misc_device_register函数中申请misc dev时识别下sensor drv有无填充上文所说的misc_dev字段，
如果有填充就用misc_dev字段来注册杂项设备，没有的话就用系统为该类型sensor提供的通用ops.(其实系统通用ops，真正有用的是ioctl)。
    这样，既能让具体sensor驱动选择自己的ioctl提供给上层、又能选择用系统通用的ioctl提供给上层。
    同时地，将compass目录下地电子罗盘驱动中的.init字段钩子函数的misc_register代码行去掉。

#问题3：思路
   "commpass"加序号就好了。
具体是commpass0、commpass1、accel0
最终效果：
1.假如系统当前只有一个compass类设备(ak8963)，那么经过改良后的架构为：
misc
|__commpass-0(这个名字是ak8963.c的compass_akm8963_ops .name字段)
--------------------------------------------------------------------------------------------------
2.假如系统当前有两个个compass类设备(ak8963、ak8975)，那么经过改良后的架构为：
misc
|__commpass0(这个名字是ak8963.c的compass_akm8963_ops .name字段)
|__commpass1

==============================================================
问题1：解决热启动问题
思路：由于sensor core是一个驱动(由i2c dev和input_dev drv打包而成)。
       所以，在内核启动sensor core 装入内核时当下的i2c bus会扫描设备树和sensor_dt_ids，找到对应的device(设备树节点.compatible字段)
就调用probe函数。而修复前版本ak8963驱动加载进内核并不会增加相应的设备(device $1)。故而，sensor core的probe行为只会在sensor core加载进内核时。
       我们要解决的是如何在ak8963这种驱动加载时使总线驱动扫描driver链表。那么sensor core的probe就有机会热启动。
具体操作是：在ak8963作为热启动时在调用sensor_register_slave向系统注册时做一层i2c bus的match方法。
其实说白了，就是再做一遍内核启动时该总线要做的事情。
...........................................................................................................................................
备注：
$1:由Linux平台设备模型可知，总线驱动会在有dev或者drv装入总线时扫描总线下的device、driver链表。